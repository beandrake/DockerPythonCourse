networks:   # this defines two different networks with different names that we can allow our services below access to
  frontend:
  backend:

secrets:    # makes certain files invisible except to the services that we specifically allow to see these secrets
  db_password:
    file: db_password.txt

services:
  productservice:
    build: product-service
    volumes:
      - "./config:/config"
      - "./product-service/src:/code" # This allows us to change Python code while a container is running so we can debug and test on the fly.
    secrets:
      - db_password
    networks:
      - frontend
      - backend
    ports:
      #  - "5000:5000"  # removed when we added the nginx part below, because the nginx will take care of this for us
      - "5678:5678"
    environment:  # sets environment variables
      - DEBUG=True
    
  web:
    build: nginx
    ports:
      - "80:80" # http
    networks:
      - frontend

  db:
    image: mysql
    command: "--init-file /data/application/init.sql --default-authentication-plugin=mysql_native_password" # initialize the database from this file
    volumes:
      - "./db/init.sql:/data/application/init.sql"  # mount the init sql file from local db directory to the data/application directory in the container
      - "db-volume:/var/lib/mysql"                  # connects to the db-volume in the below section; create volume in home directory and make it available to the db container, allowing db state to persist between runs
    environment:
      - MYSQL_ROOT_PASSWORD=password
    networks:
      - backend

volumes:
  db-volume:
